# –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API, –º–æ–¥–µ–ª—è–º–∏, –¥–∞–Ω–Ω—ã–º–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
import os
import requests
import modules.utils as utils
import logging
from aiogram import Bot, types, F, Router
from aiogram.filters import Command
import redis

router = Router()

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def start_command(message: types.Message, bot: Bot):
    """
    –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    await utils.log_user_action(message.from_user.id, "start command")
    await message.answer(
            f"*üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {message.from_user.full_name} \\!*",
            parse_mode="MarkdownV2"
        )

@router.message(Command("help"))
async def help_command(message: types.Message, bot: Bot):
    """
    –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
    """
    await utils.log_user_action(message.from_user.id, "help command")

    help_text = (
        "*üõ† –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
        "/start ‚Äî üëã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º\n"
        "/help ‚Äî ‚ÑπÔ∏è –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "\n"
        "_–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –∏ —è –æ—Ç–≤–µ—á—É –Ω–∞ –Ω–µ–≥–æ —Å –ø–æ–º–æ—â—å—é YandexGPT\\._"
    )

    await message.answer(help_text, parse_mode="MarkdownV2")

    

@router.message(F.text)
async def process_message(message: types.Message, bot: Bot):
    """
    –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    """
    r = redis.Redis(host='redis', port=6379, decode_responses=True)
    iam_token = r.get("IAM_TOKEN")
    folder_id = os.getenv("FOLDER_ID")
    data = {
        "modelUri": f"gpt://{folder_id}/yandexgpt",
        "completionOptions": {"temperature": 0.3, "maxTokens": 1000},
        "messages": [{"role": "user", "text": message.text}],
    }

    URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    response = requests.post(
        URL,
        headers={
            "Accept": "application/json",
            "Authorization": f"Bearer {iam_token}"
        },
        json=data,
    ).json()
    await utils.log_user_action(message.from_user.id, "text message")

    answer = response.get('result', {}).get('alternatives', [{}])[
        0].get('message', {}).get('text', "No answer found.")
    await message.answer(answer, parse_mode="Markdown")
